@using WrpCcNocWeb.Models
@using WrpCcNocWeb.Helpers
@model WrpCcNocWeb.ViewModels.AdminNewUserCreation

@{
    ViewData["Title"] = "Create New User";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="row">
    <div class="col-md-12">
        <div class="card">
            <div class="card-body">
                <div class="row">
                    <div class="col-md-3">
                        <button type="button" class="btn btn-block btn-blue">Back to User List</button>
                        @*<h4>@Html.ActionLink("Back to User List", "viewUsers", "account")</h4>*@
                        <br />
                    </div>
                    <div class="col-md-9">
                        <h4 class="header-title mb-3"> <b>New User </b></h4>
                        @using (Html.BeginForm("createuser", "account", FormMethod.Post, new { enctype = "multipart/form-data", id = "SignUpForm", role = "form" }))
                        {
                            <div class="form-group">
                                <label for="UserType">User Type</label>
                                <select id="UserType" name="UserType" class="form-control">
                                    <option value="">Choose...</option>
                                    @if (ViewBag.IsWarpoUser == "warpo")
                                    {
                                        <option value="WARPO" selected>WARPO</option>
                                        <option value="Non-WARPO" selected>Non-WARPO</option>
                                    }
                                    else if (ViewBag.IsWarpoUser == "non-warpo")
                                    {
                                        <option value="Non-WARPO" selected>Non-WARPO</option>
                                    }
                                    else
                                    {
                                        <option value="WARPO">WARPO</option>
                                        <option value="Non-WARPO">Non-WARPO</option>
                                    }
                                </select>
                            </div>

                            <div class="form-group">
                                <label for="UserGroup">User Group</label>
                                <select id="UserGroup" name="UserGroup" class="form-control">
                                    <option value="">Choose...</option>

                                    @{
                                        List<LookUpAdminModUserGroup> _ugs = ViewBag.LookUpAdminModUserGroup;

                                        if (_ugs.Count > 0)
                                        {
                                            foreach (LookUpAdminModUserGroup ug in _ugs)
                                            {
                                                <option value="@ug.UserGroupId" title="@ug.AuthorityLevelId">@ug.UserGroupName</option>
                                            }
                                        }
                                    }
                                </select>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(m => m.UserName, new { @class = "control-label" }) <span class="text-danger bold">*</span>
                                <div class="input-group mb-2">
                                    @Html.EditorFor(m => m.UserName, new { htmlAttributes = new { @class = "form-control", @type = "text", @placeholder = "Enter user name", @required = "required", @autocomplete = "off" } })
                                    <div id="spinner" class="input-group-prepend d-none">
                                        <button class="btn btn-primary" type="button" disabled="">
                                            <span class="spinner-grow spinner-grow-sm" role="status" aria-hidden="true"></span> <span class="sr-only">Loading...</span>
                                        </button>
                                    </div>
                                    @Html.Hidden("isValidUsr")
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(m => m.UserPassword, new { @class = "control-label" }) <span class="text-danger bold">*</span>
                                @Html.EditorFor(m => m.UserPassword, new { htmlAttributes = new { @class = "form-control", @type = "password", @placeholder = "Enter user password", @required = "required", @autocomplete = "off", @onKeyUp = "PasswordStrength(jQuery(this).val());" } })
                                <div id="pwd-invalid-feedback"></div>
                            </div>

                            <div class="form-group">
                                <label for="UserConfirmPassword">Confirm Password <span class="text-danger">*</span></label>
                                <input id="UserConfirmPassword" name="UserConfirmPassword" class="form-control" type="password" parsley-trigger="change"
                                       placeholder="Confirm password" autocomplete="off" required>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(m => m.UserEmail, new { @class = "control-label" }) <span class="text-danger bold">*</span>
                                @Html.EditorFor(m => m.UserEmail, new { htmlAttributes = new { @class = "form-control", @type = "email", @placeholder = "Enter user email", @required = "required", @autocomplete = "off" } })
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(m => m.UserMobile, new { @class = "control-label" }) <span class="text-danger bold">*</span>
                                @Html.EditorFor(m => m.UserMobile, new { htmlAttributes = new { @class = "form-control", @type = "text", @placeholder = "Enter user contact number", @required = "required", @autocomplete = "off", @maxlength = "11", onKeyPress = "return restrictChars(event, this)" } })
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(m => m.FullName, new { @class = "control-label" }) <span class="text-danger bold">*</span>
                                @Html.EditorFor(m => m.FullName, new { htmlAttributes = new { @class = "form-control", @type = "text", @placeholder = "Enter user full name", @autocomplete = "off" } })
                            </div>

                            <div class="form-group" data-toggle="tooltip" title="Press Control + B to change language.">
                                @Html.LabelFor(m => m.FullNameBn, new { @class = "control-label" }) <span class="text-danger bold">*</span>
                                @Html.EditorFor(m => m.FullNameBn, new { htmlAttributes = new { @class = "form-control", @type = "text", @placeholder = "Enter user full name", @autocomplete = "off" } })
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(m => m.Designation, new { @class = "control-label" }) <span class="text-danger bold">*</span>
                                @Html.EditorFor(m => m.Designation, new { htmlAttributes = new { @class = "form-control", @type = "text", @placeholder = "Enter user designation", @autocomplete = "off" } })
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(m => m.Address, new { @class = "control-label" }) <span class="text-danger bold">*</span>
                                @Html.EditorFor(m => m.Address, new { htmlAttributes = new { @class = "form-control", @type = "text", @placeholder = "Enter user address", @autocomplete = "off" } })
                            </div>

                            <div class="form-group" data-toggle="tooltip" title="Press Control + B to change language.">
                                @Html.LabelFor(m => m.AddressBn, new { @class = "control-label" }) <span class="text-danger bold">*</span>
                                @Html.EditorFor(m => m.AddressBn, new { htmlAttributes = new { @class = "form-control", @type = "text", @placeholder = "Enter user address", @autocomplete = "off" } })
                            </div>

                            <div id="divSigSeal" class="d-none">
                                <hr />
                                <div class="form-group">
                                    <label for="SignatureFileName" data-toggle="tooltip"
                                           title="Signature must be 300 X 80 pixel (width X height) [.jpg/.png/.bmp format] and file size not more than 80 KB (Min. 3 KB)">
                                        Upload Signature <span class="text-danger bold">*</span>
                                    </label>
                                    <div class="input-group" style="width: 300px;">
                                        <div class="custom-file">
                                            <input id="SignatureFileName" name="SignatureFileName" type="file" class="custom-file-input"
                                                   onchange="return ValidateFileUpload()" />
                                            <label id="ViewSignatureFileName" for="SignatureFileName" class="custom-file-label">
                                                Choose file
                                            </label>
                                            <img id="PrevSignatureFile" src="~/images/sample_signature.jpg" style="width: 200px; height: 36px; margin-left: 350px;" />
                                        </div>
                                    </div>
                                </div>

                                <div class="form-group">
                                    <label for="SealFileName" data-toggle="tooltip"
                                           title="Seal must be 100 X 100 pixel (width X height) [.jpg/.png/.bmp format] and file size not more than 80 KB (Min. 3 KB)">
                                        Upload Seal <span class="text-danger bold">*</span>
                                    </label>
                                    <div class="input-group" style="width: 300px;">
                                        <div class="custom-file">
                                            <input id="SealFileName" name="SealFileName" type="file" class="custom-file-input"
                                                   onchange="return ValidateSealFileUpload()" />
                                            <label id="ViewSealFileName" for="SealFileName" class="custom-file-label">
                                                Choose file
                                            </label>
                                            <img id="PrevSealFile" src="~/images/100x100.png" style="width: 100px; height: 100px; margin-left: 350px;" />
                                        </div>
                                    </div>
                                </div>
                                <br />
                                <hr />
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(m => m.SecurityQuestionId, new { @class = "control-label" }) <span class="text-danger bold">*</span>
                                @Html.DropDownList("SecurityQuestionId", null, string.Empty, new { @id = "SecurityQuestionId", @class = "form-control", @style = "width: 100%;" })
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(m => m.SecurityQuestionAnswer, new { @class = "control-label" }) <span class="text-danger bold">*</span>
                                @Html.EditorFor(m => m.SecurityQuestionAnswer, new { htmlAttributes = new { @class = "form-control", @type = "text", @placeholder = "Security question answer" } })
                            </div>

                            <div class="form-group">
                                <div class="custom-control custom-checkbox">
                                    <input id="checkbox-signup" type="checkbox" class="custom-control-input">
                                    <label class="custom-control-label" for="checkbox-signup">I accept <a href="@Url.Action("termcondition", "account")" target="_blank" class="text-dark">Terms and Conditions</a></label>
                                </div>
                            </div>

                            <div class="form-group">
                                <button id="btnSaveUser" type="submit" class="btn btn-info waves-effect waves-light">
                                    <span class="btn-label"><i class="mdi mdi-content-save"></i></span>
                                    <span style="text-decoration: underline;">S</span>ave
                                    <span class="myspinner spinner-border spinner-border-sm mr-1 d-none"></span>
                                </button>

                                <button id="btnClearUser" type="reset" class="btn btn-secondary waves-effect waves-light">
                                    <span class="btn-label"><i class="mdi mdi-close-outline"></i></span>
                                    Clear
                                </button>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script type="text/javascript">
    jQuery(document).ready(function () {
        jQuery('#FullNameBn, #AddressBn').avro({ 'bn': true });

        jQuery("#UserGroup").change(function () {
            var groupId = jQuery(this).val(); //1000000003
            var authLevel = $(this).find("option:selected").attr("title"); //1, 3, 5

            if (groupId == '1000000003' || authLevel == 1 || authLevel == 3 || authLevel == 5) {
                jQuery("#divSigSeal").removeClass('d-none');
            } else {
                jQuery("#divSigSeal").addClass('d-none');
            }
        });
    });

    function UploadSignatureFile(inputid) {
        var urid = GetHiddenValue('UserRegistrationId');
	    var input = document.getElementById(inputid);
	    var files = input.files;

	    var formData = new FormData();
        formData.append("urid", urid);
	    formData.append("controltitle", inputid);
	    formData.append("file", files[0]);

        var url = '@Url.Action("uusf", "account")';
	    $.ajax({
		    url: url,
		    data: formData,
		    processData: false,
		    contentType: false,
		    type: "POST",
		    success: function (data) {
			    if (data.message != '')
				    Swal.fire(data.title, data.message, data.status);
		    }, error: function (jqXHR, exception) {
			    var errorMsg = AjaxErrorHandle(jqXHR, exception);
			    Swal.fire('Error Occured', errorMsg, 'error');
		    }
	    });
    }

    function ValidateFileUpload() {
        var fuData = document.getElementById('SignatureFileName');
        var FileUploadPath = fuData.value;

        if (FileUploadPath == '') {
            Notification('info', 'Select Signature Image', 'Please select an image of signature.');
            Swal.fire('Select Signature Image', 'Please select an image of signature.', 'info');
        } else {
            var FileName = fuData.files[0].name;
            var Extension = FileName.replace(/^.*\./, '');

            if (Extension == "gif" || Extension == "png" || Extension == "bmp" || Extension == "jpeg" || Extension == "jpg") {
                if (fuData.files && fuData.files[0]) {
                    var reader = new FileReader();
                    reader.readAsDataURL(fuData.files[0]);
                    reader.onload = function (e) {
                        var image = new Image();
                        image.src = e.target.result;
                        image.onload = function () {
                            var height = this.height;
                            var width = this.width;

                            if (height > 85) {
                                Notification('warning', 'Exceeding Image Height', 'Height must not exceed 80px.');
                                Swal.fire('Exceeding Image Height', 'Height must not exceed 80px.', 'warning');

                                return false;
                            }

                            if (width > 315) {
                                Notification('warning', 'Exceeding Image Width', 'Width must not exceed 300px');
                                Swal.fire('Exceeding Image Width', 'Width must not exceed 300px', 'warning');
                                return false;
                            }
                        };

                        $('#PrevSignatureFile').attr('src', e.target.result);
                        $('#PrevSignatureFile').show();
                        $('#ViewSignatureFileName').text(FileName);
                    }
                } else {
                    $('#PrevSignatureFile').attr('src', '../images/sample_signature.jpg');
                    $('#PrevSignatureFile').show();
                    $('#ViewSignatureFileName').text('Choose file');
                }
            }
            else {
                Notification('warning', 'Invalid File Format', 'Photo only allows file types of JPG/ JPEG/ PNG/ GIF/ BMP.');
                Swal.fire('Invalid File Format', 'Photo only allows file types of JPG/ JPEG/ PNG/ GIF/ BMP.', 'warning');

                $('#PrevSignatureFile').attr('src', '../images/sample_signature.jpg');
                $('#PrevSignatureFile').show();
                $('#ViewSignatureFileName').text('Choose file');
            }
        }
    }

    function ValidateSealFileUpload() {
        var fuData = document.getElementById('SealFileName');
        var FileUploadPath = fuData.value;

        if (FileUploadPath == '') {
            Notification('info', 'Select Seal Image', 'Please select an image of seal.');
            Swal.fire('Select Seal Image', 'Please select an image of seal.', 'info');
        } else {
            var FileName = fuData.files[0].name;
            var Extension = FileName.replace(/^.*\./, '');

            if (Extension == "gif" || Extension == "png" || Extension == "bmp" || Extension == "jpeg" || Extension == "jpg") {
                if (fuData.files && fuData.files[0]) {
                    var reader = new FileReader();
                    reader.readAsDataURL(fuData.files[0]);
                    reader.onload = function (e) {
                        var image = new Image();
                        image.src = e.target.result;
                        image.onload = function () {
                            var height = this.height;
                            var width = this.width;

                            if (height > 100) {
                                Notification('warning', 'Exceeding Image Height', 'Height must not exceed 100px.');
                                Swal.fire('Exceeding Image Height', 'Height must not exceed 100px.', 'warning');

                                return false;
                            }

                            if (width > 100) {
                                Notification('warning', 'Exceeding Image Width', 'Width must not exceed 100px');
                                Swal.fire('Exceeding Image Width', 'Width must not exceed 100px', 'warning');
                                return false;
                            }
                        };

                        $('#PrevSealFile').attr('src', e.target.result);
                        $('#PrevSealFile').show();
                        $('#ViewSealFileName').text(FileName);
                    }
                } else {
                    $('#PrevSealFile').attr('src', '../images/100x100.png');
                    $('#PrevSealFile').show();
                    $('#ViewSealFileName').text('Choose file');
                }
            }
            else {
                Notification('warning', 'Invalid File Format', 'Photo only allows file types of JPG/ JPEG/ PNG/ GIF/ BMP.');
                Swal.fire('Invalid File Format', 'Photo only allows file types of JPG/ JPEG/ PNG/ GIF/ BMP.', 'warning');

                $('#PrevSealFile').attr('src', '../images/100x100.png');
                $('#PrevSealFile').show();
                $('#ViewSealFileName').text('Choose file');
            }
        }
    }
</script>